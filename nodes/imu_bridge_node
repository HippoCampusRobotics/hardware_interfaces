#!/usr/bin/env python
import rospy
from hippocampus_common.node import Node
from pymavlink import mavutil
from geometry_msgs.msg import Vector3Stamped


class BridgeNode(Node):
    def __init__(self, name, anonymous=False, disable_signals=False):
        super().__init__(name, anonymous, disable_signals)
        self.connection = mavutil.mavlink_connection('/dev/fcu_usb',
                                                     baud=921600)
        self.rpy_pub = rospy.Publisher('rpy', Vector3Stamped, queue_size=30)

    def run(self):
        rospy.loginfo('Waiting for heartbeat...')
        self.connection.recv_match(type='HEARTBEAT', blocking=True)
        rospy.loginfo('Received heartbeat!')
        if mavutil.mavlink20():
            rospy.loginfo('Using mavlink2.0')
        else:
            rospy.loginfo('Using mavlink1.0')
        t_heartbeat = rospy.get_time()
        while not rospy.is_shutdown():
            now = rospy.get_time()
            if now - t_heartbeat >= 1.0:
                self.connection.mav.heartbeat_send(
                    mavutil.mavlink.MAV_TYPE_ONBOARD_CONTROLLER,
                    mavutil.mavlink.MAV_AUTOPILOT_INVALID, 0, 0, 0)
                t_heartbeat = now
            msg = self.connection.recv_match(type='ATTITUDE', blocking=True)
            if not msg:
                continue
            if msg.get_type() == 'BAD_DATA':
                rospy.logwarn('Received bad data!')
            else:
                out = Vector3Stamped()
                out.header.stamp = rospy.Time.now()
                out.vector.x = msg.roll
                out.vector.y = msg.pitch
                out.vector.z = msg.yaw
                self.rpy_pub.publish(out)


def main():
    node = BridgeNode('imu_bridge')
    node.run()


if __name__ == '__main__':
    main()
